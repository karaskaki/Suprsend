{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/store.ts","../src/api.ts","../src/notifications.ts","../src/index.ts"],"sourcesContent":["export class SuprSendError extends Error {\n  name: string\n\n  constructor(message: string) {\n    super(message)\n    this.name = 'SuprSendError'\n  }\n}\n\nexport function utcNow() {\n  return new Date().toUTCString()\n}\n\nexport function epochNow() {\n  return Math.round(Date.now())\n}\n\nexport function uuid() {\n  var dt = new Date().getTime()\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n    /[xy]/g,\n    function (c) {\n      var r = (dt + Math.random() * 16) % 16 | 0\n      dt = Math.floor(dt / 16)\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\n    }\n  )\n  return uuid\n}\n","import { createStore } from 'zustand/vanilla'\nimport { IConfigStore, INotificationStore } from './types'\n\nexport const configurationStore = createStore<IConfigStore>()(() => ({\n  apiUrl: 'https://inboxs.live',\n  collectorApiUrl: 'https://hub.suprsend.com',\n  socketUrl: 'https://betainbox.suprsend.com',\n  pageSize: 20\n}))\n\nexport const initialNotificationStore: INotificationStore = {\n  unseenCount: 0,\n  stores: {},\n  activeStoreId: null,\n  pageNumber: 1,\n  hasNext: true,\n  initialLoading: false,\n  fetchMoreLoading: false,\n  initialFetchTime: null\n}\n\nexport const notificationStore = createStore<INotificationStore>()(\n  () => initialNotificationStore\n)\n","import { io, Socket } from 'socket.io-client'\nimport { uuid, epochNow } from './utils'\nimport { configurationStore, notificationStore } from './store'\nimport SuprSendInbox from '.'\nimport { IStore, IRemoteNotification } from './types'\n\nexport default class ApiClient {\n  socket: Socket\n  config: SuprSendInbox\n\n  constructor(config: SuprSendInbox) {\n    this.config = config\n    const configStore = configurationStore.getState()\n\n    this.socket = io(configStore.socketUrl, {\n      transports: ['websocket'],\n      auth: {\n        subscriber_id: this.config.subscriberId,\n        distinct_id: this.config.distinctId,\n        authorization: `${this.config.workspaceKey}:${uuid()}`,\n        tenant_id: this.config.tenantId\n      },\n      reconnectionAttempts: 25,\n      reconnectionDelay: 5000,\n      reconnectionDelayMax: 10000\n    })\n    this._initializeSocketEvents()\n  }\n\n  private orderNotifications(\n    newNotification: IRemoteNotification,\n    oldNotifications: IRemoteNotification[]\n  ) {\n    // if pinned notification add new notification at start else at end of pinned notifications\n    if (newNotification.is_pinned) {\n      return [newNotification, ...oldNotifications]\n    } else {\n      let addedNotification = false\n      let notifications: IRemoteNotification[] = []\n      oldNotifications.forEach((notification) => {\n        if (notification.is_pinned) {\n          notifications.push(notification)\n        } else {\n          if (addedNotification) {\n            notifications.push(notification)\n          } else {\n            notifications.push(newNotification)\n            notifications.push(notification)\n            addedNotification = true\n          }\n        }\n      })\n      if (!addedNotification) {\n        return [...oldNotifications, newNotification]\n      }\n      return notifications\n    }\n  }\n\n  private _initializeSocketEvents() {\n    this.socket.on('new_notification', async (data) => {\n      if (!data.n_id) return\n      setTimeout(async () => {\n        try {\n          const response = await this.getNotificationDetails(data.n_id)\n          const resData = await response.json()\n\n          const notifStore = notificationStore.getState()\n          if (this.config.stores) {\n            let overallCountUpdate = false\n            for (let store of this.config.stores) {\n              const storeData = notifStore.stores[store.storeId]\n              if (this._notificationBelongToStore(resData.data, store)) {\n                overallCountUpdate = true\n                storeData.notifications = this.orderNotifications(\n                  resData.data,\n                  storeData.notifications\n                )\n                storeData.unseenCount += 1\n              }\n            }\n            if (overallCountUpdate) {\n              notifStore.unseenCount += 1\n              this.config.emitter.emit('new_notification', resData.data)\n            }\n            notificationStore.setState({\n              unseenCount: notifStore.unseenCount,\n              stores: { ...notifStore.stores }\n            })\n          } else {\n            if (!notifStore.activeStoreId) return\n            let defaultStore = notifStore.stores[notifStore.activeStoreId]\n            notifStore.unseenCount += 1\n            defaultStore.unseenCount += 1\n            defaultStore.notifications = this.orderNotifications(\n              resData.data,\n              defaultStore.notifications\n            )\n            notificationStore.setState({\n              unseenCount: notifStore.unseenCount,\n              stores: { ...notifStore.stores }\n            })\n            this.config.emitter.emit('new_notification', resData.data)\n          }\n\n          this.config.emitter.emit('sync_notif_store')\n        } catch (e) {\n          console.log('SuprSend: error in new_notification event', e)\n        }\n      }, 1000)\n    })\n\n    this.socket.on('notification_updated', async (data) => {\n      if (!data.n_id) return\n      setTimeout(async () => {\n        try {\n          const apiCalls = await Promise.allSettled([\n            this.getNotificationDetails(data.n_id),\n            this.getNotificationsCount()\n          ])\n\n          const notifStore = notificationStore.getState()\n          let activeStoreId = notifStore.activeStoreId\n\n          if (apiCalls[0].status === 'fulfilled') {\n            const response = apiCalls[0].value\n            const resData = await response.json()\n            const newNotificationData = resData.data\n\n            if (!activeStoreId) return\n\n            let activeStore = notifStore.stores[activeStoreId]\n            const activeStoreQueryData = this.config.stores?.find(\n              (store) => store.storeId === activeStoreId\n            )\n\n            if (data?.type === 'archive') {\n              if (activeStoreQueryData?.query?.archived) {\n                if (\n                  this._notificationBelongToStore(\n                    newNotificationData,\n                    activeStoreQueryData\n                  )\n                ) {\n                  notifStore.stores[activeStoreId].notifications = [\n                    newNotificationData,\n                    ...activeStore.notifications\n                  ]\n                }\n              } else {\n                notifStore.stores[activeStoreId].notifications =\n                  activeStore.notifications.filter(\n                    (notification) => notification.n_id !== data.n_id\n                  )\n              }\n            } else {\n              notifStore.stores[activeStoreId].notifications =\n                activeStore.notifications.map((notification) =>\n                  notification.n_id === data.n_id ? resData.data : notification\n                )\n            }\n\n            notificationStore.setState({ stores: { ...notifStore.stores } })\n          }\n\n          if (apiCalls[1].status === 'fulfilled') {\n            const countResponse = apiCalls[1].value\n            const countData = await countResponse.json()\n\n            notificationStore.setState((prevState) => {\n              for (let storeId in prevState.stores) {\n                const store = prevState.stores[storeId]\n                store.unseenCount = countData[storeId] || 0\n              }\n              return {\n                unseenCount: countData.ss_bell_count,\n                stores: { ...prevState.stores }\n              }\n            })\n          }\n\n          this.config.emitter.emit('sync_notif_store')\n        } catch (e) {\n          console.log('SuprSend: error in notification_updated event', e)\n        }\n      }, 1000)\n    })\n\n    this.socket.on('update_badge', async () => {\n      notificationStore.setState({ unseenCount: 0 })\n      this.config.emitter.emit('sync_notif_store')\n    })\n\n    this.socket.on('mark_all_read', async () => {\n      const notifStore = notificationStore.getState()\n      const clickedOn = epochNow()\n\n      for (let storeId in notifStore.stores) {\n        const store = notifStore.stores[storeId]\n        store.notifications.forEach((notification: IRemoteNotification) => {\n          if (!notification.seen_on) {\n            notification.seen_on = clickedOn\n          }\n        })\n        store.unseenCount = 0\n      }\n      notificationStore.setState({ stores: notifStore.stores })\n      this.config.emitter.emit('sync_notif_store')\n    })\n  }\n\n  private _notificationBelongToStore(notification: any, store?: IStore) {\n    const notifRead = !!notification.seen_on\n    const notifArchived = notification.archived\n    const notifTags: string[] | undefined = notification.tags\n    const notifCategory: string = notification.n_category\n\n    const storeRead = store?.query?.read\n    const storeArchived = store?.query?.archived\n    const storeTags = store?.query?.tags\n    const storeCategories = store?.query?.categories\n\n    const sameRead = !storeRead || notifRead === storeRead\n    const sameArchived = !storeArchived || notifArchived === storeArchived\n    let sameTags, sameCategory\n\n    if (Array.isArray(storeTags) && storeTags.length > 0) {\n      storeTags.forEach((tag) => {\n        if (notifTags?.includes(tag)) {\n          sameTags = true\n        }\n      })\n    } else {\n      sameTags = true\n    }\n\n    if (Array.isArray(storeCategories) && storeCategories.length > 0) {\n      if (storeCategories.includes(notifCategory)) {\n        sameCategory = true\n      }\n    } else {\n      sameCategory = true\n    }\n\n    return sameRead && sameTags && sameCategory && sameArchived\n  }\n\n  private _getStoreQueryString(store: IStore) {\n    const query = store?.query\n\n    let tags = query?.tags || []\n    let categories = query?.categories || []\n    const read = query?.read\n    const archived = query?.archived\n\n    return {\n      store_id: store.storeId,\n      query: {\n        read,\n        archived,\n        tags: { or: tags },\n        categories: { or: categories }\n      }\n    }\n  }\n\n  private _getStoresQueryString() {\n    const stores = this.config.stores\n\n    let apiStores = stores?.map((store) => {\n      return this._getStoreQueryString(store)\n    })\n\n    return apiStores\n  }\n\n  getNotificationsCount() {\n    const { apiUrl } = configurationStore.getState()\n    let route = `/notification_count/?subscriber_id=${this.config.subscriberId}&distinct_id=${this.config.distinctId}&tenant_id=${this.config.tenantId}`\n\n    if (this.config.stores) {\n      const storedFilter = this._getStoresQueryString()\n      route += `&stores=${encodeURIComponent(JSON.stringify(storedFilter))}`\n    }\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`\n      }\n    })\n  }\n\n  getNotifications(\n    store: IStore | undefined,\n    page_no: number,\n    page_size: number = 20,\n    before: number\n  ) {\n    const { apiUrl } = configurationStore.getState()\n    let route = `/notifications/?subscriber_id=${this.config.subscriberId}&distinct_id=${this.config.distinctId}&tenant_id=${this.config.tenantId}&page_no=${page_no}&page_size=${page_size}&before=${before}`\n\n    if (store) {\n      const storedFilter = this._getStoreQueryString(store)\n      route += `&store=${encodeURIComponent(JSON.stringify(storedFilter))}`\n    }\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`\n      }\n    })\n  }\n\n  getNotificationDetails(notification_id: string) {\n    const { apiUrl } = configurationStore.getState()\n    const route = `/notification/${notification_id}/?subscriber_id=${this.config.subscriberId}&distinct_id=${this.config.distinctId}&tenant_id=${this.config.tenantId}`\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`\n      }\n    })\n  }\n\n  markBellClicked() {\n    const { apiUrl } = configurationStore.getState()\n    const route = '/bell-clicked/'\n    const body = JSON.stringify({\n      time: epochNow(),\n      distinct_id: this.config.distinctId,\n      subscriber_id: this.config.subscriberId,\n      tenant_id: this.config.tenantId\n    })\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'POST',\n      body,\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markAllRead() {\n    const { apiUrl } = configurationStore.getState()\n    const route = '/mark-all-read/'\n    const body = JSON.stringify({\n      time: epochNow(),\n      distinct_id: this.config.distinctId,\n      subscriber_id: this.config.subscriberId,\n      tenant_id: this.config.tenantId\n    })\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'POST',\n      body,\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationClicked(id: string) {\n    const { collectorApiUrl } = configurationStore.getState()\n    const body = {\n      event: '$notification_clicked',\n      env: this.config.workspaceKey,\n      $insert_id: uuid(),\n      $time: epochNow(),\n      properties: { id }\n    }\n\n    return fetch(`${collectorApiUrl}/event/`, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationRead(id: string) {\n    const { apiUrl } = configurationStore.getState()\n\n    return fetch(`${apiUrl}/notification/${id}/action`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'read',\n        distinct_id: this.config.distinctId,\n        subscriber_id: this.config.subscriberId\n      }),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationUnRead(id: string) {\n    const { apiUrl } = configurationStore.getState()\n\n    return fetch(`${apiUrl}/notification/${id}/action`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'unread',\n        distinct_id: this.config.distinctId,\n        subscriber_id: this.config.subscriberId\n      }),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationArchive(id: string) {\n    const { apiUrl } = configurationStore.getState()\n\n    return fetch(`${apiUrl}/notification/${id}/action`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'archive',\n        distinct_id: this.config.distinctId,\n        subscriber_id: this.config.subscriberId\n      }),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n}\n","import SuprSendInbox from '.'\nimport { configurationStore, notificationStore } from './store'\nimport { IRemoteNotification } from './types'\nimport { epochNow } from './utils'\n\nexport default class Inbox {\n  private config: SuprSendInbox\n\n  constructor(config: SuprSendInbox) {\n    this.config = config\n  }\n\n  private _overallFirstApiCall() {\n    const notifStore = notificationStore.getState()\n\n    for (let storeId in notifStore.stores) {\n      const store = notifStore.stores[storeId]\n      if (store.isFirstCall === false) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  async fetchNotifications() {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const configStore = configurationStore.getState()\n\n    const activeStoreId = notifStore.activeStoreId\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const isFirstTime = storeData.isFirstCall\n    const initialFetchTime = notifStore.initialFetchTime || Date.now()\n\n    const storeQuery = this.config.stores?.find((store) => {\n      return store.storeId === activeStoreId\n    })\n\n    try {\n      if (!apiClient || !notifStore.hasNext) return\n\n      if (isFirstTime) {\n        notificationStore.setState({ initialLoading: true })\n\n        if (this._overallFirstApiCall()) {\n          this.getNotificationsCount()\n        }\n      } else if (notifStore.pageNumber > 1) {\n        notificationStore.setState({ fetchMoreLoading: true })\n      }\n\n      this.config.emitter.emit('sync_notif_store')\n\n      const response = await apiClient.getNotifications(\n        storeQuery,\n        notifStore.pageNumber,\n        configStore.pageSize,\n        initialFetchTime\n      )\n      const data = await response.json()\n      let newNotifications\n\n      if (isFirstTime || (!isFirstTime && notifStore.pageNumber === 1)) {\n        newNotifications = data.results\n      } else {\n        newNotifications = [...storeData.notifications, ...data.results]\n      }\n\n      notifStore.stores[activeStoreId].notifications = newNotifications\n      notifStore.stores[activeStoreId].isFirstCall = false\n\n      notificationStore.setState({\n        stores: notifStore.stores,\n        pageNumber: notifStore.pageNumber + 1,\n        hasNext: data.meta.current_page < data.meta.total_pages,\n        initialFetchTime: initialFetchTime,\n        initialLoading: false,\n        fetchMoreLoading: false\n      })\n\n      this.config.emitter.emit('sync_notif_store')\n      this.config._startExipryCheck()\n    } catch (e) {\n      console.log('SUPRSEND: error getting latest notifications', e)\n      notificationStore.setState({\n        initialLoading: false,\n        fetchMoreLoading: false\n      })\n      this.config.emitter.emit('sync_notif_store')\n    }\n  }\n\n  async getNotificationsCount() {\n    const apiClient = this.config.client\n\n    if (!apiClient) return\n\n    try {\n      const response = await apiClient.getNotificationsCount()\n      const data = await response.json()\n\n      notificationStore.setState((prevState) => {\n        for (let storeId in prevState.stores) {\n          const store = prevState.stores[storeId]\n          store.unseenCount = data[storeId] || 0\n        }\n        return {\n          unseenCount: data.ss_bell_count,\n          stores: { ...prevState.stores }\n        }\n      })\n\n      this.config.emitter.emit('sync_notif_store')\n    } catch (e) {\n      console.log('SUPRSEND: error getting notifications count', e)\n    }\n  }\n\n  async markClicked(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const notifications: IRemoteNotification[] = storeData.notifications\n\n    const clickedNotification: IRemoteNotification | undefined =\n      notifications.find((item: IRemoteNotification) => item.n_id === id)\n\n    if (\n      clickedNotification &&\n      (!clickedNotification.interacted_on || !clickedNotification.seen_on)\n    ) {\n      if (!apiClient) return\n\n      try {\n        if (!clickedNotification.interacted_on) {\n          apiClient.markNotificationClicked(id)\n        } else if (!clickedNotification.seen_on) {\n          apiClient.markNotificationRead(id)\n        }\n\n        const clickedOn = epochNow()\n        clickedNotification.interacted_on = clickedOn\n\n        if (!clickedNotification.seen_on) {\n          for (let storeId in notifStore?.stores) {\n            const store = notifStore.stores[storeId]\n            store.notifications?.forEach((item) => {\n              if (item.n_id === clickedNotification.n_id) {\n                item.seen_on = clickedOn\n                item.interacted_on = clickedOn\n                if (store.unseenCount > 0) {\n                  store.unseenCount -= 1\n                }\n              }\n            })\n          }\n        }\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification clicked', e)\n      }\n    }\n  }\n\n  async markAllSeen() {\n    const apiClient = this.config.client\n\n    try {\n      if (!apiClient) return\n\n      apiClient.markBellClicked()\n\n      notificationStore.setState({ unseenCount: 0 })\n      this.config.emitter.emit('sync_notif_store')\n    } catch (e) {\n      console.log('SUPRSEND: error marking all notifications seen', e)\n    }\n  }\n\n  async markAllRead() {\n    const apiClient = this.config.client\n\n    try {\n      if (!apiClient) return\n\n      apiClient.markAllRead()\n\n      const notifStore = notificationStore.getState()\n      const clickedOn = epochNow()\n\n      for (let storeId in notifStore.stores) {\n        const store = notifStore.stores[storeId]\n        store.notifications.forEach((notification: IRemoteNotification) => {\n          if (!notification.seen_on) {\n            notification.seen_on = clickedOn\n          }\n        })\n        store.unseenCount = 0\n      }\n\n      notificationStore.setState({ stores: notifStore.stores })\n      this.config.emitter.emit('sync_notif_store')\n    } catch (e) {\n      console.log('SUPRSEND: error marking all notifications read', e)\n    }\n  }\n\n  async markRead(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const notifications: IRemoteNotification[] = storeData.notifications\n\n    const clickedNotification: IRemoteNotification | undefined =\n      notifications.find((item: IRemoteNotification) => item.n_id === id)\n\n    if (clickedNotification && !clickedNotification.seen_on) {\n      if (!apiClient) return\n      try {\n        apiClient.markNotificationRead(id)\n\n        const clickedOn = epochNow()\n\n        if (!clickedNotification.seen_on) {\n          for (let storeId in notifStore?.stores) {\n            const store = notifStore.stores[storeId]\n            store.notifications?.forEach((item) => {\n              if (item.n_id === clickedNotification.n_id) {\n                item.seen_on = clickedOn\n                if (store.unseenCount > 0) {\n                  store.unseenCount -= 1\n                }\n              }\n            })\n          }\n        }\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification read', e)\n      }\n    }\n  }\n\n  async markUnRead(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const notifications: IRemoteNotification[] = storeData.notifications\n\n    const clickedNotification: IRemoteNotification | undefined =\n      notifications.find((item: IRemoteNotification) => item.n_id === id)\n\n    if (clickedNotification && clickedNotification.seen_on) {\n      if (!apiClient) return\n      try {\n        apiClient.markNotificationUnRead(id)\n\n        if (clickedNotification.seen_on) {\n          for (let storeId in notifStore?.stores) {\n            const store = notifStore.stores[storeId]\n            store.notifications?.forEach((item) => {\n              if (item.n_id === clickedNotification.n_id) {\n                item.seen_on = undefined\n                if (store.unseenCount >= 0) {\n                  store.unseenCount += 1\n                }\n              }\n            })\n          }\n        }\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification read', e)\n      }\n    }\n  }\n\n  markArchived(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const stores = notifStore?.stores\n    const storeData = stores[activeStoreId]\n\n    const clickedNotification: IRemoteNotification | undefined =\n      storeData.notifications.find(\n        (item: IRemoteNotification) => item.n_id === id\n      )\n\n    if (clickedNotification && !clickedNotification.archived) {\n      if (!apiClient) return\n      try {\n        apiClient.markNotificationArchive(id)\n\n        storeData.notifications = storeData.notifications.filter(\n          (notification) => notification.n_id !== id\n        )\n\n        if (!clickedNotification.seen_on && storeData.unseenCount > 0) {\n          storeData.unseenCount -= 1\n        }\n\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification archived', e)\n      }\n    }\n  }\n\n  get stores() {\n    return this.config.stores\n  }\n\n  get data() {\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n    const storeFilters = this.stores\n\n    if (!activeStoreId) return\n\n    return {\n      unseenCount: notifStore.unseenCount, // for bell\n      activeStoreId: notifStore.activeStoreId,\n      stores: notifStore.stores,\n      hasStores: storeFilters ? storeFilters?.length > 0 : false,\n      hasNext: notifStore.hasNext,\n      initialLoading: notifStore.initialLoading,\n      fetchMoreLoading: notifStore.fetchMoreLoading\n    }\n  }\n}\n","import ApiClient from './api'\nimport Inbox from './notifications'\nimport { SuprSendError } from './utils'\nimport { notificationStore, configurationStore } from './store'\nimport mitt from 'mitt'\nimport {\n  IActionObject,\n  IAvatarObject,\n  ISubTextObject,\n  IRemoteNotification,\n  IRemoteNotificationMessage,\n  IStore,\n  IStateStore\n} from './types'\n\nexport default class SuprSendInbox {\n  public workspaceKey: string = ''\n  public tenantId?: string\n  public stores?: IStore[]\n\n  public distinctId?: string\n  public subscriberId?: string\n\n  private _client?: ApiClient\n  private _expiryTimerId?: ReturnType<typeof setInterval>\n\n  public feed = new Inbox(this)\n  public emitter = mitt()\n\n  constructor(\n    workspaceKey: string,\n    config?: { pageSize?: number; tenantID?: string; stores?: IStore[] }\n  ) {\n    this._validateConfig(workspaceKey)\n    this.tenantId = config?.tenantID || 'default'\n    this._validateStore(config?.stores)\n    this._validatePageSize(config?.pageSize)\n    this._initializeStoreState()\n  }\n\n  private _validateConfig(workspaceKey: string) {\n    if (!workspaceKey) {\n      throw new SuprSendError('workspaceKey missing')\n    } else {\n      this.workspaceKey = workspaceKey\n    }\n  }\n\n  private _validateStore(stores?: IStore[]) {\n    if (!stores || !Array.isArray(stores)) return\n    const validatedStores: IStore[] = []\n\n    stores.forEach((store) => {\n      if (!store.storeId) {\n        console.log('SuprSendInbox: storeId is mandatory if stores are used')\n        return\n      }\n      const query = store?.query\n      let read: boolean | undefined\n      let tags: string[] | undefined = []\n      let categories: string[] | undefined = []\n      let archived: boolean | undefined\n\n      if (typeof query?.read === 'boolean') {\n        read = query.read\n      }\n\n      if (typeof query?.archived === 'boolean') {\n        archived = query.archived\n      }\n\n      if (typeof query?.tags === 'string') {\n        tags = [query.tags]\n      } else if (Array.isArray(query?.tags)) {\n        tags = query?.tags.filter((tag) => {\n          return typeof tag === 'string'\n        })\n      }\n\n      if (typeof query?.categories === 'string') {\n        categories = [query.categories]\n      } else if (Array.isArray(query?.categories)) {\n        categories = query?.categories.filter((category) => {\n          return typeof category === 'string'\n        })\n      }\n\n      validatedStores.push({\n        storeId: store.storeId,\n        label: store.label || store.storeId,\n        query: {\n          archived,\n          read,\n          tags,\n          categories\n        }\n      })\n    })\n    this.stores = validatedStores\n  }\n\n  private _validatePageSize(pageSize?: number) {\n    if (pageSize && typeof pageSize === 'number') {\n      const MAX_ALLOWED_PAGE_SIZE = 50\n      const validatedPageSize =\n        pageSize <= MAX_ALLOWED_PAGE_SIZE ? pageSize : MAX_ALLOWED_PAGE_SIZE\n\n      configurationStore.setState({ pageSize: validatedPageSize })\n    }\n  }\n\n  private _initializeStoreState() {\n    const default_store = 'default_store'\n    const initialStoreData = {\n      notifications: [],\n      unseenCount: 0,\n      isFirstCall: true\n    }\n\n    if (this.stores && Array.isArray(this.stores) && this.stores.length > 0) {\n      const finalStores: { [store_id: string]: IStateStore } = {}\n      this.stores.map((store) => {\n        finalStores[store.storeId] = { ...initialStoreData }\n      })\n      notificationStore.setState({\n        stores: finalStores,\n        activeStoreId: this.stores[0].storeId\n      })\n    } else {\n      notificationStore.setState({\n        stores: {\n          [default_store]: { ...initialStoreData }\n        },\n        activeStoreId: default_store\n      })\n    }\n\n    // needed as wait for even listener to register after initialization\n    setTimeout(() => {\n      this.emitter.emit('sync_notif_store')\n    }, 0)\n  }\n\n  _startExipryCheck() {\n    if (this._expiryTimerId) return\n    this._expiryTimerId = setInterval(async () => {\n      const notifData = notificationStore.getState()\n      const storeNotifsData = notifData.stores\n      let hasExpired = false\n      for (let store in storeNotifsData) {\n        let notifications = storeNotifsData[store].notifications\n\n        notifications = notifications.filter((notification) => {\n          const expired = notification.expiry\n            ? Date.now() > notification.expiry\n            : false\n          if (expired) {\n            hasExpired = true\n            return false\n          } else {\n            return true\n          }\n        })\n        storeNotifsData[store].notifications = notifications\n      }\n      if (hasExpired) {\n        notificationStore.setState({ stores: storeNotifsData })\n        await this.feed.getNotificationsCount()\n        this.emitter.emit('sync_notif_store')\n      }\n    }, 30000)\n  }\n\n  get client() {\n    if (this.distinctId && this.subscriberId) {\n      if (!this._client) {\n        this._client = new ApiClient(this)\n      }\n    } else {\n      // console.log(\n      //   \"SuprSend: Can't initialize ApiClient when distinctId/subscriberId are not present\"\n      // )\n    }\n    return this._client\n  }\n\n  identifyUser(distinctId?: string, subscriberId?: string) {\n    this.distinctId = distinctId\n    this.subscriberId = subscriberId\n  }\n\n  changeActiveStore(storeId: string) {\n    const storeData = notificationStore.getState()\n    const newStores: { [store_id: string]: IStateStore } = {}\n\n    if (storeData.activeStoreId === storeId) return\n    if (!storeData.stores?.[storeId]) return\n\n    for (let storeId in storeData.stores) {\n      const store = storeData.stores[storeId]\n      const storeNotifications = store.notifications.slice(0, 20)\n      newStores[storeId] = {\n        notifications: storeNotifications,\n        unseenCount: store.unseenCount,\n        isFirstCall: store.isFirstCall\n      }\n    }\n\n    notificationStore.setState({\n      activeStoreId: storeId,\n      stores: newStores,\n      pageNumber: 1,\n      hasNext: true,\n      initialLoading: false,\n      fetchMoreLoading: false,\n      initialFetchTime: null\n    })\n    if (this.client) {\n      this.feed.fetchNotifications()\n    }\n  }\n\n  resetUser() {\n    notificationStore.setState({\n      unseenCount: 0,\n      pageNumber: 1,\n      hasNext: true,\n      initialLoading: false,\n      fetchMoreLoading: false,\n      initialFetchTime: null\n    })\n    this._initializeStoreState()\n\n    this._client?.socket.disconnect()\n\n    this.distinctId = undefined\n    this.subscriberId = undefined\n    this._client = undefined\n\n    clearInterval(this._expiryTimerId)\n    this._expiryTimerId = undefined\n\n    this.feed = new Inbox(this)\n  }\n}\n\nexport type {\n  IActionObject,\n  IRemoteNotification,\n  IRemoteNotificationMessage,\n  IStore,\n  IAvatarObject,\n  ISubTextObject\n}\n"],"names":["SuprSendError","Error","constructor","message","name","epochNow","Math","round","Date","now","uuid","dt","getTime","replace","c","r","random","floor","toString","configurationStore","createStore","apiUrl","collectorApiUrl","socketUrl","pageSize","initialNotificationStore","unseenCount","stores","activeStoreId","pageNumber","hasNext","initialLoading","fetchMoreLoading","initialFetchTime","notificationStore","ApiClient","config","socket","configStore","getState","io","transports","auth","subscriber_id","subscriberId","distinct_id","distinctId","authorization","workspaceKey","tenant_id","tenantId","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","_initializeSocketEvents","orderNotifications","newNotification","oldNotifications","is_pinned","addedNotification","notifications","forEach","notification","push","on","data","n_id","setTimeout","response","getNotificationDetails","resData","json","notifStore","overallCountUpdate","store","storeData","storeId","_notificationBelongToStore","emitter","emit","setState","defaultStore","e","console","log","apiCalls","Promise","allSettled","getNotificationsCount","status","value","newNotificationData","activeStore","activeStoreQueryData","find","type","query","archived","filter","map","countResponse","countData","prevState","ss_bell_count","clickedOn","seen_on","notifRead","notifArchived","notifTags","tags","notifCategory","n_category","storeRead","read","storeArchived","storeTags","storeCategories","categories","sameRead","sameArchived","sameTags","sameCategory","Array","isArray","length","tag","includes","_getStoreQueryString","store_id","or","_getStoresQueryString","apiStores","route","storedFilter","encodeURIComponent","JSON","stringify","fetch","method","headers","Authorization","getNotifications","page_no","page_size","before","notification_id","markBellClicked","body","time","markAllRead","markNotificationClicked","id","event","env","$insert_id","$time","properties","markNotificationRead","action","markNotificationUnRead","markNotificationArchive","Inbox","_overallFirstApiCall","isFirstCall","fetchNotifications","apiClient","client","isFirstTime","storeQuery","newNotifications","results","meta","current_page","total_pages","_startExipryCheck","markClicked","clickedNotification","item","interacted_on","markAllSeen","markRead","markUnRead","undefined","markArchived","storeFilters","hasStores","SuprSendInbox","_client","_expiryTimerId","feed","mitt","_validateConfig","tenantID","_validateStore","_validatePageSize","_initializeStoreState","validatedStores","category","label","MAX_ALLOWED_PAGE_SIZE","validatedPageSize","default_store","initialStoreData","finalStores","setInterval","notifData","storeNotifsData","hasExpired","expired","expiry","identifyUser","changeActiveStore","newStores","storeNotifications","slice","resetUser","disconnect","clearInterval"],"mappings":"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"}