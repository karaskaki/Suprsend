{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/store.ts","../src/api.ts","../src/notifications.ts","../src/index.ts"],"sourcesContent":["export class SuprSendError extends Error {\n  name: string\n\n  constructor(message: string) {\n    super(message)\n    this.name = 'SuprSendError'\n  }\n}\n\nexport function utcNow() {\n  return new Date().toUTCString()\n}\n\nexport function epochNow() {\n  return Math.round(Date.now())\n}\n\nexport function uuid() {\n  var dt = new Date().getTime()\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n    /[xy]/g,\n    function (c) {\n      var r = (dt + Math.random() * 16) % 16 | 0\n      dt = Math.floor(dt / 16)\n      return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16)\n    }\n  )\n  return uuid\n}\n","import { createStore } from 'zustand/vanilla'\nimport { IConfigStore, INotificationStore } from './types'\n\nexport const configurationStore = createStore<IConfigStore>()(() => ({\n  apiUrl: 'https://inboxs.live',\n  collectorApiUrl: 'https://hub.suprsend.com',\n  socketUrl: 'https://betainbox.suprsend.com',\n  pageSize: 20\n}))\n\nexport const initialNotificationStore: INotificationStore = {\n  unseenCount: 0,\n  stores: {},\n  activeStoreId: null,\n  pageNumber: 1,\n  hasNext: true,\n  initialLoading: false,\n  fetchMoreLoading: false,\n  initialFetchTime: null\n}\n\nexport const notificationStore = createStore<INotificationStore>()(\n  () => initialNotificationStore\n)\n","import { io, Socket } from 'socket.io-client'\nimport { uuid, epochNow } from './utils'\nimport { configurationStore, notificationStore } from './store'\nimport SuprSendInbox from '.'\nimport { IStore, IRemoteNotification } from './types'\n\nexport default class ApiClient {\n  socket: Socket\n  config: SuprSendInbox\n\n  constructor(config: SuprSendInbox) {\n    this.config = config\n    const configStore = configurationStore.getState()\n\n    this.socket = io(configStore.socketUrl, {\n      transports: ['websocket'],\n      auth: {\n        subscriber_id: this.config.subscriberId,\n        distinct_id: this.config.distinctId,\n        authorization: `${this.config.workspaceKey}:${uuid()}`,\n        tenant_id: this.config.tenantId\n      },\n      reconnectionAttempts: 25,\n      reconnectionDelay: 5000,\n      reconnectionDelayMax: 10000\n    })\n    this._initializeSocketEvents()\n  }\n\n  private orderNotifications(\n    newNotification: IRemoteNotification,\n    oldNotifications: IRemoteNotification[]\n  ) {\n    // if pinned notification add new notification at start else at end of pinned notifications\n    if (newNotification.is_pinned) {\n      return [newNotification, ...oldNotifications]\n    } else {\n      let addedNotification = false\n      let notifications: IRemoteNotification[] = []\n      oldNotifications.forEach((notification) => {\n        if (notification.is_pinned) {\n          notifications.push(notification)\n        } else {\n          if (addedNotification) {\n            notifications.push(notification)\n          } else {\n            notifications.push(newNotification)\n            notifications.push(notification)\n            addedNotification = true\n          }\n        }\n      })\n      if (!addedNotification) {\n        return [...oldNotifications, newNotification]\n      }\n      return notifications\n    }\n  }\n\n  private _initializeSocketEvents() {\n    this.socket.on('new_notification', async (data) => {\n      if (!data.n_id) return\n      setTimeout(async () => {\n        try {\n          const response = await this.getNotificationDetails(data.n_id)\n          const resData = await response.json()\n\n          const notifStore = notificationStore.getState()\n          if (this.config.stores) {\n            let overallCountUpdate = false\n            for (let store of this.config.stores) {\n              const storeData = notifStore.stores[store.storeId]\n              if (this._notificationBelongToStore(resData.data, store)) {\n                overallCountUpdate = true\n                storeData.notifications = this.orderNotifications(\n                  resData.data,\n                  storeData.notifications\n                )\n                storeData.unseenCount += 1\n              }\n            }\n            if (overallCountUpdate) {\n              notifStore.unseenCount += 1\n              this.config.emitter.emit('new_notification', resData.data)\n            }\n            notificationStore.setState({\n              unseenCount: notifStore.unseenCount,\n              stores: { ...notifStore.stores }\n            })\n          } else {\n            if (!notifStore.activeStoreId) return\n            let defaultStore = notifStore.stores[notifStore.activeStoreId]\n            notifStore.unseenCount += 1\n            defaultStore.unseenCount += 1\n            defaultStore.notifications = this.orderNotifications(\n              resData.data,\n              defaultStore.notifications\n            )\n            notificationStore.setState({\n              unseenCount: notifStore.unseenCount,\n              stores: { ...notifStore.stores }\n            })\n            this.config.emitter.emit('new_notification', resData.data)\n          }\n\n          this.config.emitter.emit('sync_notif_store')\n        } catch (e) {\n          console.log('SuprSend: error in new_notification event', e)\n        }\n      }, 1000)\n    })\n\n    this.socket.on('notification_updated', async (data) => {\n      if (!data.n_id) return\n      setTimeout(async () => {\n        try {\n          const apiCalls = await Promise.allSettled([\n            this.getNotificationDetails(data.n_id),\n            this.getNotificationsCount()\n          ])\n\n          const notifStore = notificationStore.getState()\n          let activeStoreId = notifStore.activeStoreId\n\n          if (apiCalls[0].status === 'fulfilled') {\n            const response = apiCalls[0].value\n            const resData = await response.json()\n            const newNotificationData = resData.data\n\n            if (!activeStoreId) return\n\n            let activeStore = notifStore.stores[activeStoreId]\n            const activeStoreQueryData = this.config.stores?.find(\n              (store) => store.storeId === activeStoreId\n            )\n\n            if (data?.type === 'archive') {\n              if (activeStoreQueryData?.query?.archived) {\n                if (\n                  this._notificationBelongToStore(\n                    newNotificationData,\n                    activeStoreQueryData\n                  )\n                ) {\n                  notifStore.stores[activeStoreId].notifications = [\n                    newNotificationData,\n                    ...activeStore.notifications\n                  ]\n                }\n              } else {\n                notifStore.stores[activeStoreId].notifications =\n                  activeStore.notifications.filter(\n                    (notification) => notification.n_id !== data.n_id\n                  )\n              }\n            } else {\n              notifStore.stores[activeStoreId].notifications =\n                activeStore.notifications.map((notification) =>\n                  notification.n_id === data.n_id ? resData.data : notification\n                )\n            }\n\n            notificationStore.setState({ stores: { ...notifStore.stores } })\n          }\n\n          if (apiCalls[1].status === 'fulfilled') {\n            const countResponse = apiCalls[1].value\n            const countData = await countResponse.json()\n\n            notificationStore.setState((prevState) => {\n              for (let storeId in prevState.stores) {\n                const store = prevState.stores[storeId]\n                store.unseenCount = countData[storeId] || 0\n              }\n              return {\n                unseenCount: countData.ss_bell_count,\n                stores: { ...prevState.stores }\n              }\n            })\n          }\n\n          this.config.emitter.emit('sync_notif_store')\n        } catch (e) {\n          console.log('SuprSend: error in notification_updated event', e)\n        }\n      }, 1000)\n    })\n\n    this.socket.on('update_badge', async () => {\n      notificationStore.setState({ unseenCount: 0 })\n      this.config.emitter.emit('sync_notif_store')\n    })\n\n    this.socket.on('mark_all_read', async () => {\n      const notifStore = notificationStore.getState()\n      const clickedOn = epochNow()\n\n      for (let storeId in notifStore.stores) {\n        const store = notifStore.stores[storeId]\n        store.notifications.forEach((notification: IRemoteNotification) => {\n          if (!notification.seen_on) {\n            notification.seen_on = clickedOn\n          }\n        })\n        store.unseenCount = 0\n      }\n      notificationStore.setState({ stores: notifStore.stores })\n      this.config.emitter.emit('sync_notif_store')\n    })\n  }\n\n  private _notificationBelongToStore(notification: any, store?: IStore) {\n    const notifRead = !!notification.seen_on\n    const notifArchived = notification.archived\n    const notifTags: string[] | undefined = notification.tags\n    const notifCategory: string = notification.n_category\n\n    const storeRead = store?.query?.read\n    const storeArchived = store?.query?.archived\n    const storeTags = store?.query?.tags\n    const storeCategories = store?.query?.categories\n\n    const sameRead = !storeRead || notifRead === storeRead\n    const sameArchived = !storeArchived || notifArchived === storeArchived\n    let sameTags, sameCategory\n\n    if (Array.isArray(storeTags) && storeTags.length > 0) {\n      storeTags.forEach((tag) => {\n        if (notifTags?.includes(tag)) {\n          sameTags = true\n        }\n      })\n    } else {\n      sameTags = true\n    }\n\n    if (Array.isArray(storeCategories) && storeCategories.length > 0) {\n      if (storeCategories.includes(notifCategory)) {\n        sameCategory = true\n      }\n    } else {\n      sameCategory = true\n    }\n\n    return sameRead && sameTags && sameCategory && sameArchived\n  }\n\n  private _getStoreQueryString(store: IStore) {\n    const query = store?.query\n\n    let tags = query?.tags || []\n    let categories = query?.categories || []\n    const read = query?.read\n    const archived = query?.archived\n\n    return {\n      store_id: store.storeId,\n      query: {\n        read,\n        archived,\n        tags: { or: tags },\n        categories: { or: categories }\n      }\n    }\n  }\n\n  private _getStoresQueryString() {\n    const stores = this.config.stores\n\n    let apiStores = stores?.map((store) => {\n      return this._getStoreQueryString(store)\n    })\n\n    return apiStores\n  }\n\n  getNotificationsCount() {\n    const { apiUrl } = configurationStore.getState()\n    let route = `/notification_count/?subscriber_id=${this.config.subscriberId}&distinct_id=${this.config.distinctId}&tenant_id=${this.config.tenantId}`\n\n    if (this.config.stores) {\n      const storedFilter = this._getStoresQueryString()\n      route += `&stores=${encodeURIComponent(JSON.stringify(storedFilter))}`\n    }\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`\n      }\n    })\n  }\n\n  getNotifications(\n    store: IStore | undefined,\n    page_no: number,\n    page_size: number = 20,\n    before: number\n  ) {\n    const { apiUrl } = configurationStore.getState()\n    let route = `/notifications/?subscriber_id=${this.config.subscriberId}&distinct_id=${this.config.distinctId}&tenant_id=${this.config.tenantId}&page_no=${page_no}&page_size=${page_size}&before=${before}`\n\n    if (store) {\n      const storedFilter = this._getStoreQueryString(store)\n      route += `&store=${encodeURIComponent(JSON.stringify(storedFilter))}`\n    }\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`\n      }\n    })\n  }\n\n  getNotificationDetails(notification_id: string) {\n    const { apiUrl } = configurationStore.getState()\n    const route = `/notification/${notification_id}/?subscriber_id=${this.config.subscriberId}&distinct_id=${this.config.distinctId}&tenant_id=${this.config.tenantId}`\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`\n      }\n    })\n  }\n\n  markBellClicked() {\n    const { apiUrl } = configurationStore.getState()\n    const route = '/bell-clicked/'\n    const body = JSON.stringify({\n      time: epochNow(),\n      distinct_id: this.config.distinctId,\n      subscriber_id: this.config.subscriberId,\n      tenant_id: this.config.tenantId\n    })\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'POST',\n      body,\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markAllRead() {\n    const { apiUrl } = configurationStore.getState()\n    const route = '/mark-all-read/'\n    const body = JSON.stringify({\n      time: epochNow(),\n      distinct_id: this.config.distinctId,\n      subscriber_id: this.config.subscriberId,\n      tenant_id: this.config.tenantId\n    })\n\n    return fetch(`${apiUrl}${route}`, {\n      method: 'POST',\n      body,\n      headers: {\n        Authorization: `${this.config.workspaceKey}:${uuid()}`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationClicked(id: string) {\n    const { collectorApiUrl } = configurationStore.getState()\n    const body = {\n      event: '$notification_clicked',\n      env: this.config.workspaceKey,\n      $insert_id: uuid(),\n      $time: epochNow(),\n      properties: { id }\n    }\n\n    return fetch(`${collectorApiUrl}/event/`, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationRead(id: string) {\n    const { apiUrl } = configurationStore.getState()\n\n    return fetch(`${apiUrl}/notification/${id}/action`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'read',\n        distinct_id: this.config.distinctId,\n        subscriber_id: this.config.subscriberId\n      }),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationUnRead(id: string) {\n    const { apiUrl } = configurationStore.getState()\n\n    return fetch(`${apiUrl}/notification/${id}/action`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'unread',\n        distinct_id: this.config.distinctId,\n        subscriber_id: this.config.subscriberId\n      }),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  markNotificationArchive(id: string) {\n    const { apiUrl } = configurationStore.getState()\n\n    return fetch(`${apiUrl}/notification/${id}/action`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action: 'archive',\n        distinct_id: this.config.distinctId,\n        subscriber_id: this.config.subscriberId\n      }),\n      headers: {\n        Authorization: `${this.config.workspaceKey}:`,\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n}\n","import SuprSendInbox from '.'\nimport { configurationStore, notificationStore } from './store'\nimport { IRemoteNotification } from './types'\nimport { epochNow } from './utils'\n\nexport default class Inbox {\n  private config: SuprSendInbox\n\n  constructor(config: SuprSendInbox) {\n    this.config = config\n  }\n\n  private _overallFirstApiCall() {\n    const notifStore = notificationStore.getState()\n\n    for (let storeId in notifStore.stores) {\n      const store = notifStore.stores[storeId]\n      if (store.isFirstCall === false) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  async fetchNotifications() {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const configStore = configurationStore.getState()\n\n    const activeStoreId = notifStore.activeStoreId\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const isFirstTime = storeData.isFirstCall\n    const initialFetchTime = notifStore.initialFetchTime || Date.now()\n\n    const storeQuery = this.config.stores?.find((store) => {\n      return store.storeId === activeStoreId\n    })\n\n    try {\n      if (!apiClient || !notifStore.hasNext) return\n\n      if (isFirstTime) {\n        notificationStore.setState({ initialLoading: true })\n\n        if (this._overallFirstApiCall()) {\n          this.getNotificationsCount()\n        }\n      } else if (notifStore.pageNumber > 1) {\n        notificationStore.setState({ fetchMoreLoading: true })\n      }\n\n      this.config.emitter.emit('sync_notif_store')\n\n      const response = await apiClient.getNotifications(\n        storeQuery,\n        notifStore.pageNumber,\n        configStore.pageSize,\n        initialFetchTime\n      )\n      const data = await response.json()\n      let newNotifications\n\n      if (isFirstTime || (!isFirstTime && notifStore.pageNumber === 1)) {\n        newNotifications = data.results\n      } else {\n        newNotifications = [...storeData.notifications, ...data.results]\n      }\n\n      notifStore.stores[activeStoreId].notifications = newNotifications\n      notifStore.stores[activeStoreId].isFirstCall = false\n\n      notificationStore.setState({\n        stores: notifStore.stores,\n        pageNumber: notifStore.pageNumber + 1,\n        hasNext: data.meta.current_page < data.meta.total_pages,\n        initialFetchTime: initialFetchTime,\n        initialLoading: false,\n        fetchMoreLoading: false\n      })\n\n      this.config.emitter.emit('sync_notif_store')\n      this.config._startExipryCheck()\n    } catch (e) {\n      console.log('SUPRSEND: error getting latest notifications', e)\n      notificationStore.setState({\n        initialLoading: false,\n        fetchMoreLoading: false\n      })\n      this.config.emitter.emit('sync_notif_store')\n    }\n  }\n\n  async getNotificationsCount() {\n    const apiClient = this.config.client\n\n    if (!apiClient) return\n\n    try {\n      const response = await apiClient.getNotificationsCount()\n      const data = await response.json()\n\n      notificationStore.setState((prevState) => {\n        for (let storeId in prevState.stores) {\n          const store = prevState.stores[storeId]\n          store.unseenCount = data[storeId] || 0\n        }\n        return {\n          unseenCount: data.ss_bell_count,\n          stores: { ...prevState.stores }\n        }\n      })\n\n      this.config.emitter.emit('sync_notif_store')\n    } catch (e) {\n      console.log('SUPRSEND: error getting notifications count', e)\n    }\n  }\n\n  async markClicked(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const notifications: IRemoteNotification[] = storeData.notifications\n\n    const clickedNotification: IRemoteNotification | undefined =\n      notifications.find((item: IRemoteNotification) => item.n_id === id)\n\n    if (\n      clickedNotification &&\n      (!clickedNotification.interacted_on || !clickedNotification.seen_on)\n    ) {\n      if (!apiClient) return\n\n      try {\n        if (!clickedNotification.interacted_on) {\n          apiClient.markNotificationClicked(id)\n        } else if (!clickedNotification.seen_on) {\n          apiClient.markNotificationRead(id)\n        }\n\n        const clickedOn = epochNow()\n        clickedNotification.interacted_on = clickedOn\n\n        if (!clickedNotification.seen_on) {\n          for (let storeId in notifStore?.stores) {\n            const store = notifStore.stores[storeId]\n            store.notifications?.forEach((item) => {\n              if (item.n_id === clickedNotification.n_id) {\n                item.seen_on = clickedOn\n                item.interacted_on = clickedOn\n                if (store.unseenCount > 0) {\n                  store.unseenCount -= 1\n                }\n              }\n            })\n          }\n        }\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification clicked', e)\n      }\n    }\n  }\n\n  async markAllSeen() {\n    const apiClient = this.config.client\n\n    try {\n      if (!apiClient) return\n\n      apiClient.markBellClicked()\n\n      notificationStore.setState({ unseenCount: 0 })\n      this.config.emitter.emit('sync_notif_store')\n    } catch (e) {\n      console.log('SUPRSEND: error marking all notifications seen', e)\n    }\n  }\n\n  async markAllRead() {\n    const apiClient = this.config.client\n\n    try {\n      if (!apiClient) return\n\n      apiClient.markAllRead()\n\n      const notifStore = notificationStore.getState()\n      const clickedOn = epochNow()\n\n      for (let storeId in notifStore.stores) {\n        const store = notifStore.stores[storeId]\n        store.notifications.forEach((notification: IRemoteNotification) => {\n          if (!notification.seen_on) {\n            notification.seen_on = clickedOn\n          }\n        })\n        store.unseenCount = 0\n      }\n\n      notificationStore.setState({ stores: notifStore.stores })\n      this.config.emitter.emit('sync_notif_store')\n    } catch (e) {\n      console.log('SUPRSEND: error marking all notifications read', e)\n    }\n  }\n\n  async markRead(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const notifications: IRemoteNotification[] = storeData.notifications\n\n    const clickedNotification: IRemoteNotification | undefined =\n      notifications.find((item: IRemoteNotification) => item.n_id === id)\n\n    if (clickedNotification && !clickedNotification.seen_on) {\n      if (!apiClient) return\n      try {\n        apiClient.markNotificationRead(id)\n\n        const clickedOn = epochNow()\n\n        if (!clickedNotification.seen_on) {\n          for (let storeId in notifStore?.stores) {\n            const store = notifStore.stores[storeId]\n            store.notifications?.forEach((item) => {\n              if (item.n_id === clickedNotification.n_id) {\n                item.seen_on = clickedOn\n                if (store.unseenCount > 0) {\n                  store.unseenCount -= 1\n                }\n              }\n            })\n          }\n        }\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification read', e)\n      }\n    }\n  }\n\n  async markUnRead(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const storeData = notifStore.stores[activeStoreId]\n    const notifications: IRemoteNotification[] = storeData.notifications\n\n    const clickedNotification: IRemoteNotification | undefined =\n      notifications.find((item: IRemoteNotification) => item.n_id === id)\n\n    if (clickedNotification && clickedNotification.seen_on) {\n      if (!apiClient) return\n      try {\n        apiClient.markNotificationUnRead(id)\n\n        if (clickedNotification.seen_on) {\n          for (let storeId in notifStore?.stores) {\n            const store = notifStore.stores[storeId]\n            store.notifications?.forEach((item) => {\n              if (item.n_id === clickedNotification.n_id) {\n                item.seen_on = undefined\n                if (store.unseenCount >= 0) {\n                  store.unseenCount += 1\n                }\n              }\n            })\n          }\n        }\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification read', e)\n      }\n    }\n  }\n\n  markArchived(id: string) {\n    const apiClient = this.config.client\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n\n    if (!activeStoreId || !notifStore.stores?.[activeStoreId]) return\n\n    const stores = notifStore?.stores\n    const storeData = stores[activeStoreId]\n\n    const clickedNotification: IRemoteNotification | undefined =\n      storeData.notifications.find(\n        (item: IRemoteNotification) => item.n_id === id\n      )\n\n    if (clickedNotification && !clickedNotification.archived) {\n      if (!apiClient) return\n      try {\n        apiClient.markNotificationArchive(id)\n\n        storeData.notifications = storeData.notifications.filter(\n          (notification) => notification.n_id !== id\n        )\n\n        if (!clickedNotification.seen_on && storeData.unseenCount > 0) {\n          storeData.unseenCount -= 1\n        }\n\n        notificationStore.setState({ ...notifStore })\n        this.config.emitter.emit('sync_notif_store')\n      } catch (e) {\n        console.log('SUPRSEND: error marking notification archived', e)\n      }\n    }\n  }\n\n  get stores() {\n    return this.config.stores\n  }\n\n  get data() {\n    const notifStore = notificationStore.getState()\n    const activeStoreId = notifStore.activeStoreId\n    const storeFilters = this.stores\n\n    if (!activeStoreId) return\n\n    return {\n      unseenCount: notifStore.unseenCount, // for bell\n      activeStoreId: notifStore.activeStoreId,\n      stores: notifStore.stores,\n      hasStores: storeFilters ? storeFilters?.length > 0 : false,\n      hasNext: notifStore.hasNext,\n      initialLoading: notifStore.initialLoading,\n      fetchMoreLoading: notifStore.fetchMoreLoading\n    }\n  }\n}\n","import ApiClient from './api'\nimport Inbox from './notifications'\nimport { SuprSendError } from './utils'\nimport { notificationStore, configurationStore } from './store'\nimport mitt from 'mitt'\nimport {\n  IActionObject,\n  IAvatarObject,\n  ISubTextObject,\n  IRemoteNotification,\n  IRemoteNotificationMessage,\n  IStore,\n  IStateStore\n} from './types'\n\nexport default class SuprSendInbox {\n  public workspaceKey: string = ''\n  public tenantId?: string\n  public stores?: IStore[]\n\n  public distinctId?: string\n  public subscriberId?: string\n\n  private _client?: ApiClient\n  private _expiryTimerId?: ReturnType<typeof setInterval>\n\n  public feed = new Inbox(this)\n  public emitter = mitt()\n\n  constructor(\n    workspaceKey: string,\n    config?: { pageSize?: number; tenantID?: string; stores?: IStore[] }\n  ) {\n    this._validateConfig(workspaceKey)\n    this.tenantId = config?.tenantID || 'default'\n    this._validateStore(config?.stores)\n    this._validatePageSize(config?.pageSize)\n    this._initializeStoreState()\n  }\n\n  private _validateConfig(workspaceKey: string) {\n    if (!workspaceKey) {\n      throw new SuprSendError('workspaceKey missing')\n    } else {\n      this.workspaceKey = workspaceKey\n    }\n  }\n\n  private _validateStore(stores?: IStore[]) {\n    if (!stores || !Array.isArray(stores)) return\n    const validatedStores: IStore[] = []\n\n    stores.forEach((store) => {\n      if (!store.storeId) {\n        console.log('SuprSendInbox: storeId is mandatory if stores are used')\n        return\n      }\n      const query = store?.query\n      let read: boolean | undefined\n      let tags: string[] | undefined = []\n      let categories: string[] | undefined = []\n      let archived: boolean | undefined\n\n      if (typeof query?.read === 'boolean') {\n        read = query.read\n      }\n\n      if (typeof query?.archived === 'boolean') {\n        archived = query.archived\n      }\n\n      if (typeof query?.tags === 'string') {\n        tags = [query.tags]\n      } else if (Array.isArray(query?.tags)) {\n        tags = query?.tags.filter((tag) => {\n          return typeof tag === 'string'\n        })\n      }\n\n      if (typeof query?.categories === 'string') {\n        categories = [query.categories]\n      } else if (Array.isArray(query?.categories)) {\n        categories = query?.categories.filter((category) => {\n          return typeof category === 'string'\n        })\n      }\n\n      validatedStores.push({\n        storeId: store.storeId,\n        label: store.label || store.storeId,\n        query: {\n          archived,\n          read,\n          tags,\n          categories\n        }\n      })\n    })\n    this.stores = validatedStores\n  }\n\n  private _validatePageSize(pageSize?: number) {\n    if (pageSize && typeof pageSize === 'number') {\n      const MAX_ALLOWED_PAGE_SIZE = 50\n      const validatedPageSize =\n        pageSize <= MAX_ALLOWED_PAGE_SIZE ? pageSize : MAX_ALLOWED_PAGE_SIZE\n\n      configurationStore.setState({ pageSize: validatedPageSize })\n    }\n  }\n\n  private _initializeStoreState() {\n    const default_store = 'default_store'\n    const initialStoreData = {\n      notifications: [],\n      unseenCount: 0,\n      isFirstCall: true\n    }\n\n    if (this.stores && Array.isArray(this.stores) && this.stores.length > 0) {\n      const finalStores: { [store_id: string]: IStateStore } = {}\n      this.stores.map((store) => {\n        finalStores[store.storeId] = { ...initialStoreData }\n      })\n      notificationStore.setState({\n        stores: finalStores,\n        activeStoreId: this.stores[0].storeId\n      })\n    } else {\n      notificationStore.setState({\n        stores: {\n          [default_store]: { ...initialStoreData }\n        },\n        activeStoreId: default_store\n      })\n    }\n\n    // needed as wait for even listener to register after initialization\n    setTimeout(() => {\n      this.emitter.emit('sync_notif_store')\n    }, 0)\n  }\n\n  _startExipryCheck() {\n    if (this._expiryTimerId) return\n    this._expiryTimerId = setInterval(async () => {\n      const notifData = notificationStore.getState()\n      const storeNotifsData = notifData.stores\n      let hasExpired = false\n      for (let store in storeNotifsData) {\n        let notifications = storeNotifsData[store].notifications\n\n        notifications = notifications.filter((notification) => {\n          const expired = notification.expiry\n            ? Date.now() > notification.expiry\n            : false\n          if (expired) {\n            hasExpired = true\n            return false\n          } else {\n            return true\n          }\n        })\n        storeNotifsData[store].notifications = notifications\n      }\n      if (hasExpired) {\n        notificationStore.setState({ stores: storeNotifsData })\n        await this.feed.getNotificationsCount()\n        this.emitter.emit('sync_notif_store')\n      }\n    }, 30000)\n  }\n\n  get client() {\n    if (this.distinctId && this.subscriberId) {\n      if (!this._client) {\n        this._client = new ApiClient(this)\n      }\n    } else {\n      // console.log(\n      //   \"SuprSend: Can't initialize ApiClient when distinctId/subscriberId are not present\"\n      // )\n    }\n    return this._client\n  }\n\n  identifyUser(distinctId?: string, subscriberId?: string) {\n    this.distinctId = distinctId\n    this.subscriberId = subscriberId\n  }\n\n  changeActiveStore(storeId: string) {\n    const storeData = notificationStore.getState()\n    const newStores: { [store_id: string]: IStateStore } = {}\n\n    if (storeData.activeStoreId === storeId) return\n    if (!storeData.stores?.[storeId]) return\n\n    for (let storeId in storeData.stores) {\n      const store = storeData.stores[storeId]\n      const storeNotifications = store.notifications.slice(0, 20)\n      newStores[storeId] = {\n        notifications: storeNotifications,\n        unseenCount: store.unseenCount,\n        isFirstCall: store.isFirstCall\n      }\n    }\n\n    notificationStore.setState({\n      activeStoreId: storeId,\n      stores: newStores,\n      pageNumber: 1,\n      hasNext: true,\n      initialLoading: false,\n      fetchMoreLoading: false,\n      initialFetchTime: null\n    })\n    if (this.client) {\n      this.feed.fetchNotifications()\n    }\n  }\n\n  resetUser() {\n    notificationStore.setState({\n      unseenCount: 0,\n      pageNumber: 1,\n      hasNext: true,\n      initialLoading: false,\n      fetchMoreLoading: false,\n      initialFetchTime: null\n    })\n    this._initializeStoreState()\n\n    this._client?.socket.disconnect()\n\n    this.distinctId = undefined\n    this.subscriberId = undefined\n    this._client = undefined\n\n    clearInterval(this._expiryTimerId)\n    this._expiryTimerId = undefined\n\n    this.feed = new Inbox(this)\n  }\n}\n\nexport type {\n  IActionObject,\n  IRemoteNotification,\n  IRemoteNotificationMessage,\n  IStore,\n  IAvatarObject,\n  ISubTextObject\n}\n"],"names":["SuprSendError","message","name","Error","epochNow","Math","round","Date","now","uuid","dt","getTime","replace","c","r","random","floor","toString","configurationStore","createStore","apiUrl","collectorApiUrl","socketUrl","pageSize","initialNotificationStore","unseenCount","stores","activeStoreId","pageNumber","hasNext","initialLoading","fetchMoreLoading","initialFetchTime","notificationStore","ApiClient","config","socket","configStore","getState","io","transports","auth","subscriber_id","subscriberId","distinct_id","distinctId","authorization","workspaceKey","tenant_id","tenantId","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","_initializeSocketEvents","orderNotifications","newNotification","oldNotifications","is_pinned","addedNotification","notifications","forEach","notification","push","on","data","n_id","setTimeout","_catch","getNotificationDetails","response","json","resData","notifStore","overallCountUpdate","store","storeData","storeId","_notificationBelongToStore","emitter","emit","setState","defaultStore","e","console","log","Promise","allSettled","getNotificationsCount","apiCalls","status","countResponse","value","countData","prevState","ss_bell_count","newNotificationData","activeStore","activeStoreQueryData","find","type","query","archived","filter","map","clickedOn","seen_on","notifRead","notifArchived","notifTags","tags","notifCategory","n_category","storeRead","read","storeArchived","storeTags","storeCategories","categories","sameRead","sameArchived","sameTags","sameCategory","Array","isArray","length","tag","includes","_getStoreQueryString","store_id","or","_getStoresQueryString","apiStores","route","storedFilter","encodeURIComponent","JSON","stringify","fetch","method","headers","Authorization","getNotifications","page_no","page_size","before","notification_id","markBellClicked","body","time","markAllRead","markNotificationClicked","id","event","env","$insert_id","$time","properties","markNotificationRead","action","markNotificationUnRead","markNotificationArchive","Inbox","_overallFirstApiCall","isFirstCall","fetchNotifications","apiClient","client","isFirstTime","storeQuery","newNotifications","results","meta","current_page","total_pages","_startExipryCheck","markClicked","clickedNotification","item","interacted_on","markAllSeen","markRead","markUnRead","undefined","markArchived","storeFilters","hasStores","SuprSendInbox","_client","_expiryTimerId","feed","mitt","_validateConfig","tenantID","_validateStore","_validatePageSize","_initializeStoreState","validatedStores","category","label","MAX_ALLOWED_PAGE_SIZE","validatedPageSize","default_store","initialStoreData","finalStores","setInterval","notifData","storeNotifsData","hasExpired","expired","expiry","identifyUser","changeActiveStore","newStores","storeNotifications","slice","resetUser","disconnect","clearInterval"],"mappings":"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"}